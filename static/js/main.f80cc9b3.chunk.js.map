{"version":3,"sources":["components/CustomCSVparser.js","components/navbar.jsx","components/LinearPlot.js","App.js","reportWebVitals.js","index.js"],"names":["buttonRef","React","createRef","CustomCSVparser","handleOpenDialog","e","current","open","handleOnFileLoad","data","file","console","log","name","props","onUploadDataChange","csv_to_json","handleOnError","err","inputElem","reason","handleOnRemoveFile","onRemoveDataChange","handleRemoveFile","removeFile","header","json_data","i","length","data_array","j","push","ref","onFileLoad","this","onError","noClick","noDrag","onRemoveFile","style","display","flexDirection","marginBottom","className","type","onClick","Component","NavBar","href","LinePlot","state","mode","layout","title","height","autosize","margin","l","r","b","t","template","colorway","font","color","hovermode","hoverlabel","align","paper_bgcolor","plot_bgcolor","coloraxis","colorbar","outlinewidth","ticks","xaxis","gridcolor","linecolor","standoff","zerolinecolor","automargin","zerolinewidth","yaxis","scene","backgroundcolor","showbackground","gridwidth","zaxis","shapedefaults","line","annotationdefaults","arrowcolor","arrowhead","arrowwidth","geo","bgcolor","landcolor","subunitcolor","showland","showlakes","lakecolor","x","mapbox","y","useResizeHandler","width","initialState","fileUploadData","Selectors","id","options","value","graphOneSelect","undefined","graphTwoSelect","fileName","clone","target","map","Map","cloneTarget","Array","isArray","get","key","set","App","updateGraph","selector","selectorID","head","setState","handleUpdateFileData","filename","headers","Object","keys","label","selectors","handleRemoveFileData","Fragment","Container","Row","Col","md","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f80cc9b3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { CSVReader } from \"react-papaparse\";\n\nconst buttonRef = React.createRef();\n\nexport default class CustomCSVparser extends Component {\n  csv_to_json(data) {\n    var header = data[0][\"data\"];\n    var json_data = {};\n    for (let i = 0; i < header.length; i++) {\n      json_data[header[i]] = [];\n    }\n\n    for (let i = 1; i < data.length; i++) {\n      var data_array = data[i][\"data\"];\n      for (let j = 0; j < header.length; j++) {\n        json_data[header[j]].push(data_array[j]);\n      }\n    }\n    return json_data;\n  }\n\n  handleOpenDialog = (e) => {\n    // Note that the ref is set async, so it might be null at some point\n    if (buttonRef.current) {\n      buttonRef.current.open(e);\n    }\n  };\n\n  handleOnFileLoad = (data, file) => {\n    console.log(data);\n    console.log(file.name);\n    console.log(\"---------------------------\");\n    this.props.onUploadDataChange(this.csv_to_json(data), file.name);\n    console.log(\"---------------------------\");\n  };\n\n  handleOnError = (err, file, inputElem, reason) => {\n    console.log(err);\n  };\n\n  handleOnRemoveFile = (data) => {\n    console.log(\"---------------------------\");\n    this.props.onRemoveDataChange();\n    console.log(\"---------------------------\");\n  };\n\n  handleRemoveFile = (e) => {\n    // Note that the ref is set async, so it might be null at some point\n    // TODO we also need to notify the parent to clean out the data\n    if (buttonRef.current) {\n      buttonRef.current.removeFile(e);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <CSVReader\n          ref={buttonRef}\n          onFileLoad={this.handleOnFileLoad}\n          onError={this.handleOnError}\n          noClick\n          noDrag\n          onRemoveFile={this.handleOnRemoveFile}\n        >\n          {({ file }) => (\n            <aside\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                marginBottom: 30,\n              }}\n            >\n              <div className=\"pull-right\">\n                <button\n                  type=\"button\"\n                  onClick={this.handleOpenDialog}\n                  className=\"btn btn-primary\"\n                >\n                  Browse file\n                </button>\n              </div>\n              <div className=\"pull-right\">\n                <button\n                  className=\"btn btn-danger\"\n                  onClick={this.handleRemoveFile}\n                >\n                  Remove\n                </button>\n              </div>\n            </aside>\n          )}\n        </CSVReader>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n//Stateless Functional Component\nconst NavBar = () => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"https://weilixu.github.io/exreact-pages/\">\n          Simple Plot Application\n        </a>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\n\nclass LinePlot extends Component {\n  constructor(props) {\n    super(props);\n    let template = {\n      layout: {\n        colorway: [\n          \"#636efa\",\n          \"#EF553B\",\n          \"#00cc96\",\n          \"#ab63fa\",\n          \"#FFA15A\",\n          \"#19d3f3\",\n          \"#FF6692\",\n          \"#B6E880\",\n          \"#FF97FF\",\n          \"#FECB52\",\n        ],\n        font: {\n          color: \"#2a3f5f\",\n        },\n        hovermode: \"closest\",\n        hoverlabel: {\n          align: \"left\",\n        },\n        paper_bgcolor: \"white\",\n        plot_bgcolor: \"#E5ECF6\",\n        coloraxis: {\n          colorbar: {\n            outlinewidth: 0,\n            ticks: \"\",\n          },\n        },\n        xaxis: {\n          gridcolor: \"white\",\n          linecolor: \"white\",\n          ticks: \"\",\n          title: {\n            standoff: 15,\n          },\n          zerolinecolor: \"white\",\n          automargin: true,\n          zerolinewidth: 2,\n        },\n        yaxis: {\n          gridcolor: \"white\",\n          linecolor: \"white\",\n          ticks: \"\",\n          title: {\n            standoff: 15,\n          },\n          zerolinecolor: \"white\",\n          automargin: true,\n          zerolinewidth: 2,\n        },\n        scene: {\n          xaxis: {\n            backgroundcolor: \"#E5ECF6\",\n            gridcolor: \"white\",\n            linecolor: \"white\",\n            showbackground: true,\n            ticks: \"\",\n            zerolinecolor: \"white\",\n            gridwidth: 2,\n          },\n          yaxis: {\n            backgroundcolor: \"#E5ECF6\",\n            gridcolor: \"white\",\n            linecolor: \"white\",\n            showbackground: true,\n            ticks: \"\",\n            zerolinecolor: \"white\",\n            gridwidth: 2,\n          },\n          zaxis: {\n            backgroundcolor: \"#E5ECF6\",\n            gridcolor: \"white\",\n            linecolor: \"white\",\n            showbackground: true,\n            ticks: \"\",\n            zerolinecolor: \"white\",\n            gridwidth: 2,\n          },\n        },\n        shapedefaults: {\n          line: {\n            color: \"#2a3f5f\",\n          },\n        },\n        annotationdefaults: {\n          arrowcolor: \"#2a3f5f\",\n          arrowhead: 0,\n          arrowwidth: 1,\n        },\n        geo: {\n          bgcolor: \"white\",\n          landcolor: \"#E5ECF6\",\n          subunitcolor: \"white\",\n          showland: true,\n          showlakes: true,\n          lakecolor: \"white\",\n        },\n        title: {\n          x: 0.05,\n        },\n        mapbox: {\n          style: \"light\",\n        },\n      },\n    };\n    this.state = {\n      type: \"scatter\",\n      mode: \"lines\",\n      layout: {\n        title: this.props.title,\n        height: 300,\n        autosize: true,\n        margin: { l: 10, r: 10, b: 30, t: 40 },\n        template: template,\n      },\n    };\n  }\n  render() {\n    const data = [\n      {\n        x: this.props.data.x,\n        y: this.props.data.y,\n        type: this.state.type,\n        mode: this.state.mode,\n      },\n    ];\n    return (\n      <Plot\n        data={data}\n        layout={this.state.layout}\n        useResizeHandler\n        style={{ width: \"100%\" }}\n      />\n    );\n  }\n}\n\nexport default LinePlot;\n","import \"./App.css\";\n\nimport React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport Container from \"react-bootstrap/Container\";\nimport CustomCSVparser from \"./components/CustomCSVparser\";\nimport NavBar from \"./components/navbar\";\nimport Select from \"react-select\";\nimport LinePlot from \"./components/LinearPlot\";\n\n//life cycle hooks:\n//Mount - construction render componentDidMount\n//Update - reader componentDidUpdate\n//UnMount - componentWillUnmount\n\nconst initialState = {\n  fileUploadData: {},\n  Selectors: [\n    { id: \"graph-1-xselector\", options: [], value: [] },\n    { id: \"graph-1-yselector\", options: [], value: [] },\n    { id: \"graph-2-xselector\", options: [], value: [] },\n    { id: \"graph-2-yselector\", options: [], value: [] },\n  ],\n  graphOneSelect: {\n    x: undefined,\n    y: undefined,\n    xaxis: undefined,\n    yaxis: undefined,\n  },\n  graphTwoSelect: {\n    x: undefined,\n    y: undefined,\n    xaxis: undefined,\n    yaxis: undefined,\n  },\n  fileName: \"\",\n};\n\n//clone function to clone initial state - it only works for object and [] for now\n//which is enough for this sample purpose\nfunction clone(target, map = new Map()) {\n  if (typeof target === \"object\") {\n    let cloneTarget = Array.isArray(target) ? [] : {};\n    if (map.get(target)) {\n      return map.get(target);\n    }\n    map.set(target, cloneTarget);\n    for (const key in target) {\n      cloneTarget[key] = clone(target[key], map);\n    }\n    return cloneTarget;\n  } else {\n    return target;\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = clone(initialState);\n  }\n\n  updateGraph = (selector, selectorID) => {\n    const { graphOneSelect, graphTwoSelect, fileUploadData, Selectors } =\n      this.state;\n    let head = selector.value;\n    if (selectorID === 0 || selectorID === 1) {\n      //in this case, update graph\n      if (selectorID === 0) {\n        graphOneSelect.x = fileUploadData[head];\n        graphOneSelect.xaxis = head;\n        Selectors[0].value = selector;\n      } else if (selectorID === 1) {\n        graphOneSelect.y = fileUploadData[head];\n        graphOneSelect.yaxis = head;\n        Selectors[1].value = selector;\n      }\n      this.setState({ Selectors });\n      if (\n        graphOneSelect[\"xaxis\"] !== undefined &&\n        graphOneSelect[\"yaxis\"] !== undefined\n      ) {\n        this.setState({ graphOneSelect });\n      }\n    } else {\n      //assume they are definitely 2 and 3\n      //in this case, update graph\n      if (selectorID === 2) {\n        graphTwoSelect.x = fileUploadData[head];\n        graphTwoSelect.xaxis = head;\n        Selectors[2].value = selector;\n      } else if (selectorID === 3) {\n        graphTwoSelect.y = fileUploadData[head];\n        graphTwoSelect.yaxis = head;\n        Selectors[3].value = selector;\n      }\n      this.setState({ Selectors });\n      if (\n        graphTwoSelect[\"xaxis\"] !== undefined &&\n        graphTwoSelect[\"yaxis\"] !== undefined\n      ) {\n        this.setState({ graphTwoSelect });\n      }\n    }\n    console.log(Selectors);\n  };\n\n  handleUpdateFileData = (data, filename) => {\n    let headers = Object.keys(data).map((head) => ({\n      value: head,\n      label: head,\n    }));\n    const selectors = [...this.state.Selectors];\n    const fileUploadData = data;\n    const fileName = filename;\n\n    selectors.map((selector) => (selector.options = [...headers]));\n    this.setState({ selectors, fileUploadData, fileName });\n  };\n\n  handleRemoveFileData = () => {\n    //this function handles the remove of the dataset\n    this.setState(clone(initialState));\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar />\n        <Container>\n          <div>\n            <CustomCSVparser\n              onUploadDataChange={this.handleUpdateFileData}\n              onRemoveDataChange={this.handleRemoveFileData}\n            />\n          </div>\n          <div>\n            <h1>{this.state.fileName}</h1>\n            <form>\n              <Row className=\"align-items-center mb-3\">\n                <Col md={12}>\n                  <Select\n                    options={this.state.Selectors[0].options}\n                    id={this.state.Selectors[0].id}\n                    value={this.state.Selectors[0].value}\n                    onChange={(e) => this.updateGraph(e, 0)}\n                  />\n                  <Select\n                    options={this.state.Selectors[1].options}\n                    id={this.state.Selectors[1].id}\n                    value={this.state.Selectors[1].value}\n                    onChange={(e) => this.updateGraph(e, 1)}\n                  />\n                  <div id=\"graph-1\">\n                    <LinePlot data={this.state.graphOneSelect} />\n                  </div>\n                </Col>\n              </Row>\n              <Row className=\"align-items-center mb-3\">\n                <Col md={12}>\n                  <Select\n                    options={this.state.Selectors[2].options}\n                    id={this.state.Selectors[2].id}\n                    value={this.state.Selectors[2].value}\n                    onChange={(e) => this.updateGraph(e, 2)}\n                  />\n                  <Select\n                    options={this.state.Selectors[3].options}\n                    id={this.state.Selectors[3].id}\n                    value={this.state.Selectors[3].value}\n                    onChange={(e) => this.updateGraph(e, 3)}\n                  />\n                  <div id=\"graph-2\">\n                    <LinePlot data={this.state.graphTwoSelect} />\n                  </div>\n                </Col>\n              </Row>\n            </form>\n          </div>\n        </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}